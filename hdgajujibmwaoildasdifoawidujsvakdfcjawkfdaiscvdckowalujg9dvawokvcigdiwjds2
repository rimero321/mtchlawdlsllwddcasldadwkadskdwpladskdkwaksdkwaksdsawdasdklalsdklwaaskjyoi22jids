class App(CTk):
    def __init__(self):
        super().__init__()
        self.title("MTC Helper")
        self.geometry("1050x900")
        self.resizable(False, False)

        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)

        self.navigation_frame = CTkFrame(self, corner_radius=0)
        self.navigation_frame.grid(row=0, column=0, sticky="nsew")
        self.navigation_frame.grid_rowconfigure(8, weight=1)

        self.navigation_frame_label = CTkLabel(self.navigation_frame, text="MTC Helper",
                                               compound="left", font=CTkFont(size=20, weight="bold"))
        self.navigation_frame_label.grid(row=0, column=0, padx=20, pady=20)

        self.home_button = CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Home",
                                     fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                     anchor="w", command=self.home_button_event)
        self.home_button.grid(row=1, column=0, sticky="ew")

        self.map_frame_button = CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Map Calculator",
                                          fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                          anchor="w", command=self.map_frame_button_event)
        self.map_frame_button.grid(row=2, column=0, sticky="ew")

        self.info_frame_button = CTkButton(self.navigation_frame, corner_radius=0, height=40,
                                           border_spacing=10, text="Info",
                                           fg_color="transparent", text_color=("gray10", "gray90"),
                                           hover_color=("gray70", "gray30"),
                                           anchor="w", command=self.info_frame_button_event)
        self.info_frame_button.grid(row=4, column=0, sticky="ew")

        self.appearance_mode_menu = CTkOptionMenu(self.navigation_frame, values=["Dark", "Light"],
                                                  command=self.change_appearance_mode_event)
        self.appearance_mode_menu.grid(row=8, column=0, padx=20, pady=20, sticky="s")

        self.info_frame = CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.map_frame = CTkFrame(self, corner_radius=0, fg_color="transparent")

        self.home_frame = CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.home_frame.grid_columnconfigure(0, weight=1)

        self.captcha_mode_label = CTkLabel(self.info_frame, text='Text 1')
        self.captcha_mode_label.grid(row=1, column=1, padx=20, pady=10)

        self.bypass_mode_label = CTkLabel(self.info_frame, text='Text 2')
        self.bypass_mode_label.grid(row=2, column=1, padx=20, pady=10)

        self.map_select = CTkOptionMenu(self.map_frame, values=["Muddy Fields", "Dustbowl", "Sokolovka", "Radar Station", "Powerplant", "Arctic Airbase", "Normandy Bocage", "Roinburg", "Villers-Sommeil"], command=self.update_map_image)
        self.map_select.grid(row=1, column=1, padx=20, pady=10)

        self.map_image_label = CTkLabel(self.map_frame, text='')
        self.map_image_label.grid(row=2, column=1, padx=20, pady=10, sticky="nsew")

        self.map_images = {
            "Muddy Fields": "maps/muddy_fields.png",
            "Dustbowl": "maps/dustbowl.png",
            "Sokolovka": "maps/sokolovka.png",
            "Radar Station": "maps/radar_station.png",
            "Powerplant": "maps/powerplant.png",
            "Arctic Airbase": "maps/arctic_airbase.png",
            "Normandy Bocage": "maps/normandy.png",
            "Roinburg": "maps/roinburg.png",
            "Villers-Sommeil": "maps/villers_sommeil.png"
        }

        self.map_configs = {
            "Muddy Fields": {"size": (1148, 1148), "scale_factor": 240},
            "Dustbowl": {"size": (1139, 1141), "scale_factor": 138},
        }

        self.canvas = Canvas(self.map_frame, highlightthickness=0, bd=0, bg='gray14')
        self.canvas.grid(row=3, column=1, padx=0, pady=0)
        self.canvas.bind("<Button-1>", self.on_canvas_click)

        self.points = []
        self.current_scale_factor = 1

        self.select_frame_by_name("info")

    def select_frame_by_name(self, name):
        self.home_button.configure(fg_color=("gray75", "gray25") if name == "home" else "transparent")
        self.info_frame_button.configure(fg_color=("gray75", "gray25") if name == "info" else "transparent")
        self.map_frame_button.configure(fg_color=("gray75", "gray25") if name == "map" else "transparent")

        if name == "home":
            self.home_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.home_frame.grid_forget()

        if name == "info":
            self.info_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.info_frame.grid_forget()

        if name == "map":
            self.map_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.map_frame.grid_forget()

    def home_button_event(self):
        self.select_frame_by_name("home")

    def info_frame_button_event(self):
        self.select_frame_by_name("info")

    def map_frame_button_event(self):
        self.select_frame_by_name("map")

    def change_appearance_mode_event(self, new_appearance_mode):
        set_appearance_mode(new_appearance_mode)

    def update_map_image(self, *args):
        selected_map = self.map_select.get()
        map_image_path = self.map_images.get(selected_map)
        map_config = self.map_configs.get(selected_map)

        if map_image_path and map_config:
            original_image = Image.open(map_image_path)
            resized_image = original_image.resize(map_config["size"], Image.LANCZOS)
            self.map_image = ImageTk.PhotoImage(resized_image)
            self.canvas.create_image(0, 0, anchor="nw", image=self.map_image)
            self.canvas.image = self.map_image
            self.current_scale_factor = map_config["scale_factor"]

            self.canvas.config(width=map_config["size"][0], height=map_config["size"][1])

    def on_canvas_click(self, event):
        x, y = event.x * self.current_scale_factor / 138, event.y * self.current_scale_factor / 138
        self.points.append((x, y))
        self.canvas.create_oval(event.x - 5, event.y - 5, event.x + 5, event.y + 5, fill='red')
        
        if len(self.points) == 2:
            x0, y0 = self.points[0]
            x1, y1 = self.points[1]
            distance = self.calculate_distance(x0, y0, x1, y1)
            self.canvas.create_line(x0 / (self.current_scale_factor / 138), y0 / (self.current_scale_factor / 138), x1 / (self.current_scale_factor / 138), y1 / (self.current_scale_factor / 138), fill='blue')
            self.canvas.create_text((x0 + x1) / (2 * (self.current_scale_factor / 138)), (y0 + y1) / (2 * (self.current_scale_factor / 138)), text=f"{distance:.2f} units", fill='white', font=('Helvetica', 12))
            self.points = []

    def calculate_distance(self, x0, y0, x1, y1):
        return sqrt((x1 - x0) ** 2 + (y1 - y0) ** 2)

if __name__ == "__main__":
    app = App()
    app.mainloop()
